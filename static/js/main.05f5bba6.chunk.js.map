{"version":3,"sources":["index.tsx"],"names":["App","state","seq","bc","bcval","gc","gcval","nb","nbval","invalid","os","osval","cs","csval","rs","rsval","rcs","rcsval","grp","UValue","countBase","_this","setState","length","getGCRatio","match","at","gcRatio","Math","round","getNBase","inValid","replace","nBase","sanitize","addSpace","re","RegExp","join","rev","split","reverse","comp","lookup","A","T","C","G","N","map","el","displaySeqs","onSliderChange","_event","value","onChange","event","target","toUpperCase","onFocus","select","onClick","x","Object","C_Users_darsh_Documents_Repos_github_io_dna_node_modules_pnpm_registry_npmjs_org_babel_runtime_7_3_1_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","_this2","this","baseCount","react__WEBPACK_IMPORTED_MODULE_6__","style","color","makeNRed","oSeq","revSeq","compSeq","revCompSeq","className","marginLeft","_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_13__","container","spacing","item","xs","sm","padding","_material_ui_core_FormGroup__WEBPACK_IMPORTED_MODULE_9__","marginTop","_material_ui_core_TextareaAutosize__WEBPACK_IMPORTED_MODULE_8__","resize","width","minHeight","fontSize","rows","spellCheck","aria-label","placeholder","_material_ui_core_Slider__WEBPACK_IMPORTED_MODULE_12__","defaultValue","aria-labelledby","valueLabelDisplay","step","marks","min","max","_material_ui_core_FormControlLabel__WEBPACK_IMPORTED_MODULE_10__","labelPlacement","control","_material_ui_core_Checkbox__WEBPACK_IMPORTED_MODULE_11__","checked","label","backgroundColor","border","borderRadius","React","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.05f5bba6.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\r\n\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nimport Slider from \"@material-ui/core/Slider\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport \"./styles.css\";\r\n\r\nexport default class App extends React.Component {\r\n  state: { [key: string]: any } = {\r\n    seq: \"ACTG\",\r\n    bc: true, //base count\r\n    bcval: 4,\r\n    gc: true,\r\n    gcval: 0.5, //GC ratio\r\n    nb: true, //N bases\r\n    nbval: 0,\r\n    invalid: 0,\r\n    os: true, //Original Sequence\r\n    osval: \"ACTG\",\r\n    cs: true, //Complement Sequence\r\n    csval: \"TGAC\",\r\n    rs: true, //Reverse Sequence\r\n    rsval: \"GTCA\",\r\n    rcs: true, //Reverse Complement Sequence\r\n    rcsval: \"CAGT\",\r\n    grp: 4, //Groups of letters in the output (eg. ACT GTA CT)\r\n  };\r\n  UValue = \"ACTG\";\r\n  countBase = (seq: string) => {\r\n    this.setState({ bcval: seq.length });\r\n  };\r\n  getGCRatio = (seq: string) => {\r\n    let gc = (seq.match(/G|C/g) || []).length;\r\n    let at = (seq.match(/A|T/g) || []).length;\r\n    let gcRatio = Math.round((100 * gc) / at) / 100;\r\n    this.setState({ gcval: gcRatio });\r\n  };\r\n  getNBase = (seq: string) => {\r\n    let inValid: number = seq.replace(/A|C|T|G|N|\\s|\\n/g, \"\").length;\r\n    let nBase: number = seq.match(/N/g) ? seq.match(/N/g).length : 0;\r\n    this.setState({ nbval: nBase, invalid: inValid });\r\n  };\r\n  sanitize = (seq: string) => {\r\n    let sanitizedSeq: string;\r\n    sanitizedSeq = seq.replace(/\\s/g, \"\");\r\n    return sanitizedSeq.replace(/[^A|C|T|G|N]/g, \"N\");\r\n  };\r\n  addSpace = (seq: string) => {\r\n    if (this.state.grp === 0) {\r\n      return seq;\r\n    }\r\n    const re = new RegExp(`.{0,` + this.state.grp + `}`, \"g\");\r\n    return seq.match(re).join(\" \");\r\n  };\r\n  rev = (seq: string) => {\r\n    return seq.split(\"\").reverse().join(\"\");\r\n  };\r\n  comp = (seq: string) => {\r\n    let lookup: { [key: string]: string } = {\r\n      A: \"T\",\r\n      T: \"A\",\r\n      C: \"G\",\r\n      G: \"C\",\r\n      N: \"N\",\r\n    };\r\n    return seq\r\n      .split(\"\")\r\n      .map((el) => lookup[el])\r\n      .join(\"\");\r\n  };\r\n  displaySeqs = (seq: string) => {\r\n    if (this.state.os) {\r\n      this.setState({ osval: this.addSpace(seq) });\r\n    }\r\n    if (this.state.rs) {\r\n      this.setState({ rsval: this.addSpace(this.rev(seq)) });\r\n    }\r\n    if (this.state.cs) {\r\n      this.setState({ csval: this.addSpace(this.comp(seq)) });\r\n    }\r\n    if (this.state.rcs) {\r\n      this.setState({\r\n        rcsval: this.addSpace(this.rev(this.comp(seq))),\r\n      });\r\n    }\r\n  };\r\n  onSliderChange = (_event: any, value: any) => {\r\n    this.setState({ grp: value }, () => {\r\n      this.displaySeqs(this.UValue);\r\n    });\r\n  };\r\n  onChange = (event: React.FormEvent<HTMLTextAreaElement>) => {\r\n    const target = event.target as HTMLTextAreaElement;\r\n    let value: string = target.value;\r\n    if (!value) {\r\n      value = \"\";\r\n    }\r\n    this.UValue = this.sanitize(value.toUpperCase());\r\n    this.setState({ seq: value });\r\n    this.displaySeqs(this.UValue);\r\n    this.countBase(this.UValue);\r\n    this.getGCRatio(this.UValue);\r\n    this.getNBase(value.toUpperCase());\r\n  };\r\n  onFocus = (event: React.FormEvent<HTMLTextAreaElement>) => {\r\n    (event.target as HTMLTextAreaElement).select();\r\n  };\r\n  onClick = (x: string) => {\r\n    this.setState({ [x]: !this.state[x] });\r\n  };\r\n  render() {\r\n    const baseCount = this.state.bc ? (\r\n      <React.Fragment>\r\n        <strong>Number of Bases</strong>\r\n        <pre>{this.state.bcval}</pre>\r\n      </React.Fragment>\r\n    ) : (\r\n      \"\"\r\n    );\r\n\r\n    const gcRatio = this.state.gc ? (\r\n      <React.Fragment>\r\n        <strong>GC Ratio</strong>\r\n        <pre>{this.state.gcval}</pre>\r\n      </React.Fragment>\r\n    ) : (\r\n      \"\"\r\n    );\r\n\r\n    const nBase = this.state.nb ? (\r\n      <React.Fragment>\r\n        <strong>N Bases</strong>\r\n        <pre>\r\n          <span style={{ color: this.state.nbval > 0 ? \"red\" : \"inherit\" }}>\r\n            {this.state.nbval}\r\n          </span>{\" \"}\r\n          N bases and{\" \"}\r\n          <span style={{ color: this.state.invalid > 0 ? \"red\" : \"inherit\" }}>\r\n            {this.state.invalid}\r\n          </span>{\" \"}\r\n          invalid bases.\r\n        </pre>\r\n      </React.Fragment>\r\n    ) : (\r\n      \"\"\r\n    );\r\n\r\n    const makeNRed = (seq: string) => {\r\n      return seq.split(\"\").map((el: string) => {\r\n        return (\r\n          <span style={{ color: el === \"N\" ? \"red\" : \"inherit\" }}>{el}</span>\r\n        );\r\n      });\r\n    };\r\n\r\n    const oSeq = this.state.os ? (\r\n      <React.Fragment>\r\n        <strong>Original Sequence</strong>\r\n        <pre>{makeNRed(this.state.osval)}</pre>\r\n      </React.Fragment>\r\n    ) : (\r\n      \"\"\r\n    );\r\n\r\n    const revSeq = this.state.rs ? (\r\n      <React.Fragment>\r\n        <strong>Reverse Sequence</strong>\r\n        <pre>{makeNRed(this.state.rsval)}</pre>\r\n      </React.Fragment>\r\n    ) : (\r\n      \"\"\r\n    );\r\n\r\n    const compSeq = this.state.cs ? (\r\n      <React.Fragment>\r\n        <strong>Complement Sequence</strong>\r\n        <pre>{makeNRed(this.state.csval)}</pre>\r\n      </React.Fragment>\r\n    ) : (\r\n      \"\"\r\n    );\r\n\r\n    const revCompSeq = this.state.rcs ? (\r\n      <React.Fragment>\r\n        <strong>Reverse Complement Sequence</strong>\r\n        <pre>{makeNRed(this.state.rcsval)}</pre>\r\n      </React.Fragment>\r\n    ) : (\r\n      \"\"\r\n    );\r\n    return (\r\n      <div className=\"App\">\r\n        <h1 style={{ marginLeft: \"none\" }}>DNA</h1>\r\n        <Grid container spacing={4}>\r\n          <Grid item xs={12} sm={6} style={{ padding: \"5px\" }}>\r\n            <FormGroup>\r\n              <h3 style={{ marginTop: \"0\" }}>Enter DNA sequence</h3>\r\n              <TextareaAutosize\r\n                style={{\r\n                  resize: \"vertical\",\r\n                  width: \"95%\",\r\n                  minHeight: \"20px\",\r\n                  fontSize: \"1em\",\r\n                }}\r\n                rows={5}\r\n                value={this.state.seq}\r\n                spellCheck={false}\r\n                aria-label=\"Enter DNA sequence\"\r\n                placeholder=\"White spaces and line breaks will be ignored. Input is not case sensitive.\"\r\n                onChange={this.onChange}\r\n                onFocus={this.onFocus}\r\n              />\r\n              <h3 style={{ marginTop: \"0.5em\" }}>Chunk Size</h3>\r\n              <Slider\r\n                defaultValue={4}\r\n                aria-labelledby=\"discrete-slider\"\r\n                valueLabelDisplay=\"auto\"\r\n                onChange={this.onSliderChange}\r\n                step={1}\r\n                marks={true}\r\n                min={0}\r\n                max={6}\r\n                style={{ width: \"95%\" }}\r\n              />\r\n              <h3>Options</h3>\r\n              <FormControlLabel\r\n                labelPlacement=\"end\"\r\n                control={\r\n                  <Checkbox\r\n                    value=\"base-count\"\r\n                    color=\"primary\"\r\n                    checked={this.state.bc}\r\n                    onClick={() => this.onClick(\"bc\")}\r\n                  />\r\n                }\r\n                label=\"Number of Bases\"\r\n              />\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    value=\"gc-ratio\"\r\n                    color=\"primary\"\r\n                    checked={this.state.gc}\r\n                    onClick={() => this.onClick(\"gc\")}\r\n                  />\r\n                }\r\n                label=\"GC Ratio\"\r\n              />\r\n              <FormControlLabel\r\n                labelPlacement=\"end\"\r\n                control={\r\n                  <Checkbox\r\n                    value=\"n-base\"\r\n                    color=\"primary\"\r\n                    checked={this.state.nb}\r\n                    onClick={() => this.onClick(\"nb\")}\r\n                  />\r\n                }\r\n                label=\"N Bases (inculding invalid bases)\"\r\n              />\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    value=\"original\"\r\n                    color=\"primary\"\r\n                    checked={this.state.os}\r\n                    onClick={() => this.onClick(\"os\")}\r\n                  />\r\n                }\r\n                label=\"Original Sequence\"\r\n              />\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    value=\"complement\"\r\n                    color=\"primary\"\r\n                    checked={this.state.cs}\r\n                    onClick={() => this.onClick(\"cs\")}\r\n                  />\r\n                }\r\n                label=\"Complement Sequence\"\r\n              />\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    value=\"reverse\"\r\n                    color=\"primary\"\r\n                    checked={this.state.rs}\r\n                    onClick={() => this.onClick(\"rs\")}\r\n                  />\r\n                }\r\n                label=\"Reverse Sequence\"\r\n              />\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    value=\"rev-complement\"\r\n                    color=\"primary\"\r\n                    checked={this.state.rcs}\r\n                    onClick={() => this.onClick(\"rcs\")}\r\n                  />\r\n                }\r\n                label=\"Reverse Complement Sequence\"\r\n              />\r\n            </FormGroup>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            xs={12}\r\n            sm={6}\r\n            style={{\r\n              backgroundColor: \"#bbdefb\",\r\n              border: \"1px solid #1976d2\",\r\n              borderRadius: \"5px\",\r\n            }}\r\n          >\r\n            {baseCount}\r\n            {gcRatio}\r\n            {nBase}\r\n            {oSeq}\r\n            {compSeq}\r\n            {revSeq}\r\n            {revCompSeq}\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nrender(<App />, rootElement);\r\n"],"sourceRoot":""}