{"version":3,"sources":["components/options.tsx","components/selectionOptions.ts","components/optionList.tsx","components/helperFunctions.ts","index.tsx"],"names":["Options","props","_React$useState","React","checked","_React$useState2","Object","slicedToArray","val","setVal","react","FormControlLabel","control","Checkbox","value","color","onClick","newVal","toggle","retVal","label","ops","OptionList","open","setOpen","currentCheckedState","checkedState","_React$useState3","_React$useState4","setCheckedState","handleToggle","onCheckboxToggle","handleClose","style","position","top","left","transform","fontSize","MenuRounded_default","a","cursor","Modal","onClose","aria-labelledby","aria-describedby","backgroundColor","padding","width","maxWidth","border","display","flexDirection","justifyContent","margin","CloseRounded_default","Slider","defaultValue","valueLabelDisplay","onChange","_event","onSliderChange","step","marks","min","max","map","el","String","prototype","removeWhiteSpace","this","replace","sanitize","toUpperCase","countBase","length","getGCRatio","gc","match","at","Math","round","getNBase","getInvalidBase","rev","split","reverse","join","comp","lookup","A","T","C","G","N","addSpace","grp","toString","re","RegExp","App","state","seq","bc","bcval","gcval","nb","nbval","invalid","os","osval","cs","csval","rs","rsval","rcs","rcsval","sanitizedValue","displaySeqs","_this","setState","onInputChange","event","target","onFocus","select","handleCheckboxToggle","x","y","defineProperty","handleSliderChange","baseCount","gcRatio","nBase","makeNRed","oSeq","revSeq","compSeq","revCompSeq","className","marginLeft","href","FormGroup","marginTop","TextareaAutosize","resize","minHeight","rows","spellCheck","aria-label","placeholder","borderRadius","rootElement","document","getElementById","render","src_App"],"mappings":"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","file":"static/js/main.625a2ed8.chunk.js","sourcesContent":["import * as React from \"react\";\r\n\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nexport default function Options(props: any) {\r\n  const [val, setVal] = React.useState(props.checked);\r\n  const handleClick = () => {\r\n    let newVal = !val;\r\n    setVal(newVal);\r\n    props.toggle(props.retVal, newVal);\r\n  };\r\n  return (\r\n    <FormControlLabel\r\n      control={\r\n        <Checkbox\r\n          value={props.value}\r\n          color=\"primary\"\r\n          checked={val}\r\n          onClick={handleClick}\r\n        />\r\n      }\r\n      label={props.label}\r\n    />\r\n  );\r\n}\r\n","//Options\r\nconst ops = [\r\n  {\r\n    value: \"base-count\",\r\n    label: \"Number of Bases\",\r\n    retVal: \"bc\",\r\n  },\r\n  { value: \"gc-ratio\", label: \"GC ratio\", retVal: \"gc\" },\r\n  {\r\n    value: \"n-base\",\r\n    label: \"N Bases\",\r\n    retVal: \"nb\",\r\n  },\r\n  { value: \"original\", label: \"Original \", retVal: \"os\" },\r\n  { value: \"complement\", label: \"Complement \", retVal: \"cs\" },\r\n  { value: \"reverse\", label: \"Reverse \", retVal: \"rs\" },\r\n  {\r\n    value: \"rev-complement\",\r\n    label: \"Reverse Complement\",\r\n    retVal: \"rcs\",\r\n  },\r\n];\r\n\r\nexport default ops;\r\n","import * as React from \"react\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport MenuRoundedIcon from \"@material-ui/icons/MenuRounded\";\r\nimport CloseRoundedIcon from \"@material-ui/icons/CloseRounded\";\r\nimport Options from \"./options\";\r\nimport ops from \"./selectionOptions\";\r\n\r\nexport default function OptionList(props: any) {\r\n  const [open, setOpen] = React.useState(false);\r\n  let currentCheckedState: { [key: string]: boolean } = props.checkedState;\r\n  const [checkedState, setCheckedState] = React.useState(currentCheckedState);\r\n\r\n  const handleToggle = (retVal: string, checked: boolean) => {\r\n    currentCheckedState[retVal] = checked;\r\n    setCheckedState(currentCheckedState);\r\n    props.onCheckboxToggle(retVal, checked);\r\n  };\r\n\r\n  const handleSliderChange = (_event: any, value: any) => {\r\n    props.onSliderChange(_event, value);\r\n  };\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        style={{\r\n          position: \"fixed\",\r\n          top: \"10px\",\r\n          left: \"max(5%, calc(100vw - 960px))\",\r\n          transform: \"translateX(-100%)\",\r\n          fontSize: \"45px\",\r\n        }}\r\n        onClick={handleOpen}\r\n      >\r\n        <MenuRoundedIcon\r\n          color=\"primary\"\r\n          fontSize=\"inherit\"\r\n          style={{ cursor: \"pointer\" }}\r\n        />\r\n      </div>\r\n\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"Options\"\r\n        aria-describedby=\"Options\"\r\n      >\r\n        <div\r\n          style={{\r\n            backgroundColor: \"white\",\r\n            padding: \"5px\",\r\n            width: \"95vw\",\r\n            maxWidth: \"350px\",\r\n            border: \"solid 1px red\",\r\n            position: \"fixed\",\r\n            top: \"50%\",\r\n            left: \"50%\",\r\n            transform: \"translate(-50%, -50%)\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n              justifyContent: \"space-between\",\r\n            }}\r\n          >\r\n            <h2 style={{ margin: \"0\" }}>Options</h2>\r\n            <CloseRoundedIcon\r\n              color=\"primary\"\r\n              onClick={handleClose}\r\n              style={{ cursor: \"pointer\" }}\r\n            />\r\n          </div>\r\n\r\n          <h3 style={{ margin: \"0.5em 0 0 0\" }}>Chunk Size</h3>\r\n          <Slider\r\n            defaultValue={4}\r\n            aria-labelledby=\"discrete-slider\"\r\n            valueLabelDisplay=\"auto\"\r\n            onChange={handleSliderChange}\r\n            step={1}\r\n            marks={true}\r\n            min={0}\r\n            max={6}\r\n          />\r\n          <h3 style={{ margin: \"0.5em 0 0 0\" }}>Outputs</h3>\r\n          {ops.map((el) => {\r\n            return (\r\n              <Options\r\n                value={el.value}\r\n                label={el.label}\r\n                retVal={el.retVal}\r\n                checked={checkedState[el.retVal]}\r\n                toggle={handleToggle}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","declare global {\r\n  interface String {\r\n    removeWhiteSpace(): string;\r\n    sanitize(): string;\r\n    rev(): string;\r\n    comp(): string;\r\n    addSpace(grp: number): string;\r\n    countBase(): number;\r\n    getGCRatio(): number;\r\n    getNBase(): number;\r\n    getInvalidBase(): number;\r\n  }\r\n}\r\n\r\nString.prototype.removeWhiteSpace = function () {\r\n  return this.replace(/\\s/g, \"\");\r\n};\r\n\r\nString.prototype.sanitize = function () {\r\n  return this.removeWhiteSpace()\r\n    .toUpperCase()\r\n    .replace(/[^A|C|T|G|N]/g, \"N\");\r\n};\r\n\r\nString.prototype.countBase = function () {\r\n  return this.removeWhiteSpace().length;\r\n};\r\n\r\nString.prototype.getGCRatio = function () {\r\n  let gc = (this.match(/G|C|g|c/g) || []).length;\r\n  let at = (this.match(/A|T|a|t/g) || []).length;\r\n  let gcRatio = Math.round((100 * gc) / (at + gc)) / 100;\r\n  return gcRatio;\r\n};\r\n\r\nString.prototype.getNBase = function () {\r\n  return this.match(/N|n/g) ? this.match(/N|n/g).length : 0;\r\n};\r\n\r\nString.prototype.getInvalidBase = function () {\r\n  return this.replace(/A|C|T|G|N|a|c|t|g|n|\\s|\\n/g, \"\").length;\r\n};\r\n\r\nString.prototype.rev = function () {\r\n  return this.split(\"\").reverse().join(\"\");\r\n};\r\n\r\nString.prototype.comp = function () {\r\n  let lookup: { [key: string]: string } = {\r\n    A: \"T\",\r\n    T: \"A\",\r\n    C: \"G\",\r\n    G: \"C\",\r\n    N: \"N\",\r\n  };\r\n  return this.split(\"\")\r\n    .map((el) => lookup[el])\r\n    .join(\"\");\r\n};\r\n\r\nString.prototype.addSpace = function (grp: number) {\r\n  if (grp === 0) {\r\n    return this.toString();\r\n  }\r\n  const re = new RegExp(`.{0,` + grp + `}`, \"g\");\r\n  return this.match(re).join(\" \");\r\n};\r\n\r\nexport {};\r\n","import * as React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport OptionList from \"./components/optionList\";\r\nimport {} from \"./components/helperFunctions\";\r\nimport \"./styles.css\";\r\n\r\nexport default class App extends React.Component {\r\n  state: { [key: string]: any } = {\r\n    seq: \"ACTG\",\r\n    bc: true, //base count\r\n    bcval: 4,\r\n    gc: true, //GC ratio\r\n    gcval: 0.5,\r\n    nb: true, //N bases\r\n    nbval: 0,\r\n    invalid: 0,\r\n    os: true, //Original Sequence\r\n    osval: \"ACTG\",\r\n    cs: true, //Complement Sequence\r\n    csval: \"TGAC\",\r\n    rs: true, //Reverse Sequence\r\n    rsval: \"GTCA\",\r\n    rcs: true, //Reverse Complement Sequence\r\n    rcsval: \"CAGT\",\r\n    grp: 4, //Groups of letters in the output (eg. ACT GTA CT)\r\n  };\r\n\r\n  sanitizedValue = \"ACTG\";\r\n\r\n  displaySeqs = (seq: string) => {\r\n    if (this.state.os) {\r\n      this.setState({ osval: seq.addSpace(this.state.grp) });\r\n    }\r\n    if (this.state.rs) {\r\n      this.setState({ rsval: seq.rev().addSpace(this.state.grp) });\r\n    }\r\n    if (this.state.cs) {\r\n      this.setState({ csval: seq.comp().addSpace(this.state.grp) });\r\n    }\r\n    if (this.state.rcs) {\r\n      this.setState({\r\n        rcsval: seq.rev().comp().addSpace(this.state.grp),\r\n      });\r\n    }\r\n  };\r\n\r\n  onInputChange = (event: React.FormEvent<HTMLTextAreaElement>) => {\r\n    const target = event.target as HTMLTextAreaElement;\r\n    let value: string = target.value;\r\n    if (!value) {\r\n      value = \"\";\r\n    }\r\n    this.sanitizedValue = value.sanitize();\r\n    this.setState({ seq: value });\r\n    this.displaySeqs(this.sanitizedValue);\r\n    this.setState({ bcval: value.countBase() });\r\n    this.setState({ gcval: value.getGCRatio() });\r\n    this.setState({ nbval: value.getNBase(), invalid: value.getInvalidBase() });\r\n  };\r\n\r\n  onFocus = (event: React.FormEvent<HTMLTextAreaElement>) => {\r\n    (event.target as HTMLTextAreaElement).select();\r\n  };\r\n\r\n  handleCheckboxToggle = (x: string, y: boolean) => {\r\n    this.setState({ [x]: y });\r\n  };\r\n\r\n  handleSliderChange = (_event: any, value: any) => {\r\n    this.setState({ grp: value }, () => {\r\n      this.displaySeqs(this.sanitizedValue);\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const baseCount = this.state.bc ? (\r\n      <React.Fragment>\r\n        <strong>Number of Bases</strong>\r\n        <pre>{this.state.bcval}</pre>\r\n      </React.Fragment>\r\n    ) : (\r\n      \"\"\r\n    );\r\n\r\n    const gcRatio = this.state.gc ? (\r\n      <React.Fragment>\r\n        <strong>GC Ratio</strong>\r\n        <pre>{this.state.gcval}</pre>\r\n      </React.Fragment>\r\n    ) : (\r\n      \"\"\r\n    );\r\n\r\n    const nBase = this.state.nb ? (\r\n      <React.Fragment>\r\n        <strong>N Bases</strong>\r\n        <pre>\r\n          <span style={{ color: this.state.nbval > 0 ? \"red\" : \"inherit\" }}>\r\n            {this.state.nbval}\r\n          </span>{\" \"}\r\n          N bases and{\" \"}\r\n          <span style={{ color: this.state.invalid > 0 ? \"red\" : \"inherit\" }}>\r\n            {this.state.invalid}\r\n          </span>{\" \"}\r\n          invalid bases.\r\n        </pre>\r\n      </React.Fragment>\r\n    ) : (\r\n      \"\"\r\n    );\r\n\r\n    const makeNRed = (seq: string) => {\r\n      return seq.split(\"\").map((el: string) => {\r\n        return (\r\n          <span style={{ color: el === \"N\" ? \"red\" : \"inherit\" }}>{el}</span>\r\n        );\r\n      });\r\n    };\r\n\r\n    const oSeq = this.state.os ? (\r\n      <React.Fragment>\r\n        <strong>Original Sequence</strong>\r\n        <pre>{makeNRed(this.state.osval)}</pre>\r\n      </React.Fragment>\r\n    ) : (\r\n      \"\"\r\n    );\r\n\r\n    const revSeq = this.state.rs ? (\r\n      <React.Fragment>\r\n        <strong>Reverse Sequence</strong>\r\n        <pre>{makeNRed(this.state.rsval)}</pre>\r\n      </React.Fragment>\r\n    ) : (\r\n      \"\"\r\n    );\r\n\r\n    const compSeq = this.state.cs ? (\r\n      <React.Fragment>\r\n        <strong>Complement Sequence</strong>\r\n        <pre>{makeNRed(this.state.csval)}</pre>\r\n      </React.Fragment>\r\n    ) : (\r\n      \"\"\r\n    );\r\n\r\n    const revCompSeq = this.state.rcs ? (\r\n      <React.Fragment>\r\n        <strong>Reverse Complement Sequence</strong>\r\n        <pre>{makeNRed(this.state.rcsval)}</pre>\r\n      </React.Fragment>\r\n    ) : (\r\n      \"\"\r\n    );\r\n    return (\r\n      <div className=\"App\" style={{ marginLeft: \"40px\" }}>\r\n        <h1\r\n          style={{\r\n            margin: \"0\",\r\n            padding: \"10px 0\",\r\n          }}\r\n        >\r\n          DNA by <a href=\"https://www.darshanbaral.com/\">Darshan</a>\r\n        </h1>\r\n\r\n        <FormGroup>\r\n          <h3 style={{ marginTop: \"0\" }}>Enter DNA sequence</h3>\r\n          <TextareaAutosize\r\n            style={{\r\n              resize: \"vertical\",\r\n              minHeight: \"20px\",\r\n              fontSize: \"1em\",\r\n            }}\r\n            rows={5}\r\n            value={this.state.seq}\r\n            spellCheck={false}\r\n            aria-label=\"Enter DNA sequence\"\r\n            placeholder=\"White spaces and line breaks will be ignored. Input is not case sensitive.\"\r\n            onChange={this.onInputChange}\r\n            onFocus={this.onFocus}\r\n          />\r\n          <OptionList\r\n            checkedState={{\r\n              bc: this.state.bc,\r\n              gc: this.state.gc,\r\n              nb: this.state.nb,\r\n              rs: this.state.rs,\r\n              os: this.state.os,\r\n              cs: this.state.cs,\r\n              rcs: this.state.rcs,\r\n            }}\r\n            onCheckboxToggle={this.handleCheckboxToggle}\r\n            onSliderChange={this.handleSliderChange}\r\n          />\r\n        </FormGroup>\r\n\r\n        <div\r\n          style={{\r\n            backgroundColor: \"#bbdefb\",\r\n            padding: \"5px\",\r\n            margin: \"5px\",\r\n            border: \"1px solid #1976d2\",\r\n            borderRadius: \"5px\",\r\n          }}\r\n        >\r\n          {baseCount}\r\n          {gcRatio}\r\n          {nBase}\r\n          {oSeq}\r\n          {compSeq}\r\n          {revSeq}\r\n          {revCompSeq}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nrender(<App />, rootElement);\r\n"],"sourceRoot":""}