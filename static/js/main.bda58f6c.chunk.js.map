{"version":3,"sources":["index.tsx"],"names":["App","state","seq","bc","bcval","gc","gcval","nb","nbval","invalid","os","osval","cs","csval","rs","rsval","rcs","rcsval","grp","UValue","countBase","_this","setState","length","getGCRatio","match","at","gcRatio","Math","round","getNBase","inValid","replace","nBase","sanitize","addSpace","re","RegExp","join","rev","split","reverse","comp","lookup","A","T","C","G","N","map","el","displaySeqs","onSliderChange","_event","value","onChange","event","target","undefined","toUpperCase","onFocus","select","onClick","x","Object","C_Users_darsh_Documents_Repos_My_apps_dna_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","_this2","this","baseCount","react__WEBPACK_IMPORTED_MODULE_6__","oSeq","revSeq","compSeq","revCompSeq","className","react_helmet__WEBPACK_IMPORTED_MODULE_7__","style","marginLeft","_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_14__","container","spacing","item","xs","sm","padding","_material_ui_core_FormGroup__WEBPACK_IMPORTED_MODULE_10__","marginTop","_material_ui_core_TextareaAutosize__WEBPACK_IMPORTED_MODULE_9__","resize","width","minHeight","fontSize","rows","spellCheck","aria-label","placeholder","_material_ui_core_Slider__WEBPACK_IMPORTED_MODULE_13__","defaultValue","aria-labelledby","valueLabelDisplay","step","marks","min","max","_material_ui_core_FormControlLabel__WEBPACK_IMPORTED_MODULE_11__","labelPlacement","control","_material_ui_core_Checkbox__WEBPACK_IMPORTED_MODULE_12__","color","checked","label","backgroundColor","border","borderRadius","React","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.bda58f6c.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { render } from \"react-dom\";\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\n\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\n\nimport Slider from \"@material-ui/core/Slider\";\n\nimport Grid from \"@material-ui/core/Grid\";\n\nimport \"./styles.css\";\n\nexport default class App extends React.Component {\n  state = {\n    seq: \"ACTG\",\n    bc: true, //base count\n    bcval: 4,\n    gc: true,\n    gcval: 0.5, //GC ratio\n    nb: true, //N bases\n    nbval: 0,\n    invalid: 0,\n    os: true, //Original Sequence\n    osval: \"ACTG\",\n    cs: true, //Complement Sequence\n    csval: \"TGAC\",\n    rs: true, //Reverse Sequence\n    rsval: \"GTCA\",\n    rcs: true, //Reverse Complement Sequence\n    rcsval: \"CAGT\",\n    grp: 4 //Groups of letters in the output (eg. ACT GTA CT)\n  };\n  UValue = \"ACTG\";\n  countBase = (seq: string) => {\n    this.setState({ bcval: seq.length });\n  };\n  getGCRatio = (seq: string) => {\n    let gc = (seq.match(/G|C/g) || []).length;\n    let at = (seq.match(/A|T|C|G/g) || []).length;\n    let gcRatio = Math.round((100 * gc) / at) / 100;\n    this.setState({ gcval: gcRatio });\n  };\n  getNBase = (seq: string) => {\n    let inValid: number = seq.replace(/A|C|T|G|N/g, \"\").length;\n    let nBase: number = seq.match(/N/g) ? seq.match(/N/g).length : 0;\n    this.setState({ nbval: nBase, invalid: inValid });\n  };\n  sanitize = (seq: string) => {\n    let sanitizedSeq: string;\n    sanitizedSeq = seq.replace(/\\s/g, \"\");\n    return sanitizedSeq.replace(/[^A|C|T|G|N]/g, \"N\");\n  };\n  addSpace = (seq: string) => {\n    if (this.state.grp === 0) {\n      return seq;\n    }\n    const re = new RegExp(`.{0,` + this.state.grp + `}`, \"g\");\n    return seq.match(re).join(\" \");\n  };\n  rev = (seq: string) => {\n    return seq\n      .split(\"\")\n      .reverse()\n      .join(\"\");\n  };\n  comp = (seq: string) => {\n    const lookup: object = { A: \"T\", T: \"A\", C: \"G\", G: \"C\", N: \"N\" };\n    return seq\n      .split(\"\")\n      .map((el: string) => (lookup as any)[el])\n      .join(\"\");\n  };\n  displaySeqs = (seq: string) => {\n    if (this.state.os) {\n      this.setState({ osval: this.addSpace(seq) });\n    }\n    if (this.state.rs) {\n      this.setState({ rsval: this.addSpace(this.rev(seq)) });\n    }\n    if (this.state.cs) {\n      this.setState({ csval: this.addSpace(this.comp(seq)) });\n    }\n    if (this.state.rcs) {\n      this.setState({\n        rcsval: this.addSpace(this.rev(this.comp(seq)))\n      });\n    }\n  };\n  onSliderChange = (_event: any, value: number | number[]) => {\n    this.setState({ grp: value }, () => {\n      this.displaySeqs(this.UValue);\n    });\n  };\n  onChange = (event: React.FormEvent<HTMLTextAreaElement>) => {\n    const target = event.target as HTMLTextAreaElement;\n    let value: string = target.value;\n    if (value === undefined) {\n      value = \"\";\n    }\n    this.UValue = this.sanitize(value.toUpperCase());\n    this.setState({ seq: value });\n    this.displaySeqs(this.UValue);\n    this.countBase(this.UValue);\n    this.getGCRatio(this.UValue);\n    this.getNBase(value.toUpperCase());\n  };\n  onFocus = (event: React.FormEvent<HTMLTextAreaElement>) => {\n    (event.target as HTMLTextAreaElement).select();\n  };\n  onClick = (x: string) => {\n    this.setState({ [x]: (!this.state as any)[x] });\n  };\n  render() {\n    let baseCount = this.state.bc ? (\n      <React.Fragment>\n        <strong>Number of Bases</strong>\n        <pre>{this.state.bcval}</pre>\n      </React.Fragment>\n    ) : (\n      \"\"\n    );\n\n    let gcRatio = this.state.gc ? (\n      <React.Fragment>\n        <strong>GC Ratio</strong>\n        <pre>{this.state.gcval}</pre>\n      </React.Fragment>\n    ) : (\n      \"\"\n    );\n\n    let nBase = this.state.nb ? (\n      <React.Fragment>\n        <strong>N Bases</strong>\n        <pre>\n          {this.state.nbval} N bases and {this.state.invalid} invalid bases.\n        </pre>\n      </React.Fragment>\n    ) : (\n      \"\"\n    );\n\n    let oSeq = this.state.os ? (\n      <React.Fragment>\n        <strong>Original Sequence</strong>\n        <pre>{this.state.osval}</pre>\n      </React.Fragment>\n    ) : (\n      \"\"\n    );\n\n    let revSeq = this.state.rs ? (\n      <React.Fragment>\n        <strong>Reverse Sequence</strong>\n        <pre>{this.state.rsval}</pre>\n      </React.Fragment>\n    ) : (\n      \"\"\n    );\n\n    let compSeq = this.state.cs ? (\n      <React.Fragment>\n        <strong>Complement Sequence</strong>\n        <pre>{this.state.csval}</pre>\n      </React.Fragment>\n    ) : (\n      \"\"\n    );\n\n    let revCompSeq = this.state.rcs ? (\n      <React.Fragment>\n        <strong>Reverse Complement Sequence</strong>\n        <pre>{this.state.rcsval}</pre>\n      </React.Fragment>\n    ) : (\n      \"\"\n    );\n    return (\n      <div className=\"App\">\n        <Helmet>\n          <title>DNA by Darshan</title>\n        </Helmet>\n        <h1 style={{ marginLeft: \"none\" }}>DNA</h1>\n        <Grid container spacing={4}>\n          <Grid item xs={12} sm={6} style={{ padding: \"5px\" }}>\n            <FormGroup>\n              <h3 style={{ marginTop: \"0\" }}>Enter DNA sequence</h3>\n              <TextareaAutosize\n                style={{\n                  resize: \"vertical\",\n                  width: \"95%\",\n                  minHeight: \"20px\",\n                  fontSize: \"1em\"\n                }}\n                rows={5}\n                value={this.state.seq}\n                spellCheck={false}\n                aria-label=\"Enter DNA sequence\"\n                placeholder=\"White spaces and line breaks will be ignored. Input is not case sensitive.\"\n                onChange={this.onChange}\n                onFocus={this.onFocus}\n              />\n              <h3 style={{ marginTop: \"0.5em\" }}>Chunk Size</h3>\n              <Slider\n                defaultValue={4}\n                aria-labelledby=\"discrete-slider\"\n                valueLabelDisplay=\"auto\"\n                onChange={this.onSliderChange}\n                step={1}\n                marks={true}\n                min={0}\n                max={6}\n                style={{ width: \"95%\" }}\n              />\n              <h3>Options</h3>\n              <FormControlLabel\n                labelPlacement=\"end\"\n                control={\n                  <Checkbox\n                    value=\"base-count\"\n                    color=\"primary\"\n                    checked={this.state.bc}\n                    onClick={() => this.onClick(\"bc\")}\n                  />\n                }\n                label=\"Number of Bases\"\n              />\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    value=\"gc-ratio\"\n                    color=\"primary\"\n                    checked={this.state.gc}\n                    onClick={() => this.onClick(\"gc\")}\n                  />\n                }\n                label=\"GC Ratio\"\n              />\n              <FormControlLabel\n                labelPlacement=\"end\"\n                control={\n                  <Checkbox\n                    value=\"n-base\"\n                    color=\"primary\"\n                    checked={this.state.nb}\n                    onClick={() => this.onClick(\"nb\")}\n                  />\n                }\n                label=\"N Bases (inculding invalid bases)\"\n              />\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    value=\"original\"\n                    color=\"primary\"\n                    checked={this.state.os}\n                    onClick={() => this.onClick(\"os\")}\n                  />\n                }\n                label=\"Original Sequence\"\n              />\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    value=\"complement\"\n                    color=\"primary\"\n                    checked={this.state.cs}\n                    onClick={() => this.onClick(\"cs\")}\n                  />\n                }\n                label=\"Complement Sequence\"\n              />\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    value=\"reverse\"\n                    color=\"primary\"\n                    checked={this.state.rs}\n                    onClick={() => this.onClick(\"rs\")}\n                  />\n                }\n                label=\"Reverse Sequence\"\n              />\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    value=\"rev-complement\"\n                    color=\"primary\"\n                    checked={this.state.rcs}\n                    onClick={() => this.onClick(\"rcs\")}\n                  />\n                }\n                label=\"Reverse Complement Sequence\"\n              />\n            </FormGroup>\n          </Grid>\n          <Grid\n            item\n            xs={12}\n            sm={6}\n            style={{\n              backgroundColor: \"#bbdefb\",\n              border: \"1px solid #1976d2\",\n              borderRadius: \"5px\"\n            }}\n          >\n            {baseCount}\n            {gcRatio}\n            {nBase}\n            {oSeq}\n            {revSeq}\n            {compSeq}\n            {revCompSeq}\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}