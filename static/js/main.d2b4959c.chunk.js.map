{"version":3,"sources":["components/options.tsx","components/selectionOptions.ts","components/helperFunctions.ts","index.tsx"],"names":["Options","props","_React$useState","React","_React$useState2","Object","slicedToArray","val","setVal","react","FormControlLabel","control","Checkbox","value","color","checked","onClick","newVal","retFunc","retVal","label","ops","String","prototype","removeWhiteSpace","this","replace","sanitize","toUpperCase","countBase","length","getGCRatio","gc","match","at","Math","round","getNBase","getInvalidBase","rev","split","reverse","join","comp","lookup","A","T","C","G","N","map","el","addSpace","grp","toString","re","RegExp","App","state","seq","bc","bcval","gcval","nb","nbval","invalid","os","osval","cs","csval","rs","rsval","rcs","rcsval","sanitizedValue","displaySeqs","_this","setState","onSliderChange","_event","onInputChange","event","target","onFocus","select","x","y","defineProperty","_this2","baseCount","gcRatio","nBase","style","makeNRed","oSeq","revSeq","compSeq","revCompSeq","className","Grid","container","spacing","marginLeft","href","item","xs","sm","padding","FormGroup","marginTop","TextareaAutosize","resize","width","minHeight","fontSize","rows","spellCheck","aria-label","placeholder","onChange","Slider","defaultValue","aria-labelledby","valueLabelDisplay","step","marks","min","max","backgroundColor","border","borderRadius","rootElement","document","getElementById","render","src_App"],"mappings":"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","file":"static/js/main.d2b4959c.chunk.js","sourcesContent":["import * as React from \"react\";\r\n\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nexport default function Options(props: any) {\r\n  const [val, setVal] = React.useState(true);\r\n  const handleClick = () => {\r\n    let newVal = !val;\r\n    setVal(newVal);\r\n    props.retFunc(props.retVal, newVal);\r\n  };\r\n  return (\r\n    <FormControlLabel\r\n      control={\r\n        <Checkbox\r\n          value={props.value}\r\n          color=\"primary\"\r\n          checked={val}\r\n          onClick={handleClick}\r\n        />\r\n      }\r\n      label={props.label}\r\n    />\r\n  );\r\n}\r\n","//Options\r\nconst ops = [\r\n  {\r\n    value: \"base-count\",\r\n    label: \"Number of Bases\",\r\n    retVal: \"bc\",\r\n  },\r\n  { value: \"gc-ratio\", label: \"GC ratio\", retVal: \"gc\" },\r\n  {\r\n    value: \"n-base\",\r\n    label: \"N Bases (inculding invalid bases)\",\r\n    retVal: \"nb\",\r\n  },\r\n  { value: \"original\", label: \"Original Sequence\", retVal: \"os\" },\r\n  { value: \"complement\", label: \"Complement Sequence\", retVal: \"cs\" },\r\n  { value: \"reverse\", label: \"Reverse Sequence\", retVal: \"rs\" },\r\n  {\r\n    value: \"rev-complement\",\r\n    label: \"Reverse Complement Sequence\",\r\n    retVal: \"rcs\",\r\n  },\r\n];\r\n\r\nexport default ops;\r\n","declare global {\r\n  interface String {\r\n    removeWhiteSpace(): string;\r\n    sanitize(): string;\r\n    rev(): string;\r\n    comp(): string;\r\n    addSpace(grp: number): string;\r\n    countBase(): number;\r\n    getGCRatio(): number;\r\n    getNBase(): number;\r\n    getInvalidBase(): number;\r\n  }\r\n}\r\n\r\nString.prototype.removeWhiteSpace = function () {\r\n  return this.replace(/\\s/g, \"\");\r\n};\r\n\r\nString.prototype.sanitize = function () {\r\n  return this.removeWhiteSpace()\r\n    .toUpperCase()\r\n    .replace(/[^A|C|T|G|N]/g, \"N\");\r\n};\r\n\r\nString.prototype.countBase = function () {\r\n  return this.removeWhiteSpace().length;\r\n};\r\n\r\nString.prototype.getGCRatio = function () {\r\n  let gc = (this.match(/G|C|g|c/g) || []).length;\r\n  let at = (this.match(/A|T|a|t/g) || []).length;\r\n  let gcRatio = Math.round((100 * gc) / (at + gc)) / 100;\r\n  return gcRatio;\r\n};\r\n\r\nString.prototype.getNBase = function () {\r\n  return this.match(/N|n/g) ? this.match(/N|n/g).length : 0;\r\n};\r\n\r\nString.prototype.getInvalidBase = function () {\r\n  return this.replace(/A|C|T|G|N|a|c|t|g|n|\\s|\\n/g, \"\").length;\r\n};\r\n\r\nString.prototype.rev = function () {\r\n  return this.split(\"\").reverse().join(\"\");\r\n};\r\n\r\nString.prototype.comp = function () {\r\n  let lookup: { [key: string]: string } = {\r\n    A: \"T\",\r\n    T: \"A\",\r\n    C: \"G\",\r\n    G: \"C\",\r\n    N: \"N\",\r\n  };\r\n  return this.split(\"\")\r\n    .map((el) => lookup[el])\r\n    .join(\"\");\r\n};\r\n\r\nString.prototype.addSpace = function (grp: number) {\r\n  if (grp === 0) {\r\n    return this.toString();\r\n  }\r\n  const re = new RegExp(`.{0,` + grp + `}`, \"g\");\r\n  return this.match(re).join(\" \");\r\n};\r\n\r\nexport {};\r\n","import * as React from \"react\";\r\nimport { render } from \"react-dom\";\r\n\r\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport Options from \"./components/options\";\r\nimport ops from \"./components/selectionOptions\";\r\nimport {} from \"./components/helperFunctions\";\r\n\r\nimport \"./styles.css\";\r\n\r\nexport default class App extends React.Component {\r\n  state: { [key: string]: any } = {\r\n    seq: \"ACTG\",\r\n    bc: true, //base count\r\n    bcval: 4,\r\n    gc: true, //GC ratio\r\n    gcval: 0.5,\r\n    nb: true, //N bases\r\n    nbval: 0,\r\n    invalid: 0,\r\n    os: true, //Original Sequence\r\n    osval: \"ACTG\",\r\n    cs: true, //Complement Sequence\r\n    csval: \"TGAC\",\r\n    rs: true, //Reverse Sequence\r\n    rsval: \"GTCA\",\r\n    rcs: true, //Reverse Complement Sequence\r\n    rcsval: \"CAGT\",\r\n    grp: 4, //Groups of letters in the output (eg. ACT GTA CT)\r\n  };\r\n\r\n  sanitizedValue = \"ACTG\";\r\n\r\n  displaySeqs = (seq: string) => {\r\n    if (this.state.os) {\r\n      this.setState({ osval: seq.addSpace(this.state.grp) });\r\n    }\r\n    if (this.state.rs) {\r\n      this.setState({ rsval: seq.rev().addSpace(this.state.grp) });\r\n    }\r\n    if (this.state.cs) {\r\n      this.setState({ csval: seq.comp().addSpace(this.state.grp) });\r\n    }\r\n    if (this.state.rcs) {\r\n      this.setState({\r\n        rcsval: seq.rev().comp().addSpace(this.state.grp),\r\n      });\r\n    }\r\n  };\r\n\r\n  onSliderChange = (_event: any, value: any) => {\r\n    this.setState({ grp: value }, () => {\r\n      this.displaySeqs(this.sanitizedValue);\r\n    });\r\n  };\r\n\r\n  onInputChange = (event: React.FormEvent<HTMLTextAreaElement>) => {\r\n    const target = event.target as HTMLTextAreaElement;\r\n    let value: string = target.value;\r\n    if (!value) {\r\n      value = \"\";\r\n    }\r\n    this.sanitizedValue = value.sanitize();\r\n    this.setState({ seq: value });\r\n    this.displaySeqs(this.sanitizedValue);\r\n    this.setState({ bcval: value.countBase() });\r\n    this.setState({ gcval: value.getGCRatio() });\r\n    this.setState({ nbval: value.getNBase(), invalid: value.getInvalidBase() });\r\n  };\r\n\r\n  onFocus = (event: React.FormEvent<HTMLTextAreaElement>) => {\r\n    (event.target as HTMLTextAreaElement).select();\r\n  };\r\n\r\n  retFunc = (x: string, y: boolean) => {\r\n    this.setState({ [x]: y });\r\n  };\r\n\r\n  render() {\r\n    const baseCount = this.state.bc ? (\r\n      <React.Fragment>\r\n        <strong>Number of Bases</strong>\r\n        <pre>{this.state.bcval}</pre>\r\n      </React.Fragment>\r\n    ) : (\r\n      \"\"\r\n    );\r\n\r\n    const gcRatio = this.state.gc ? (\r\n      <React.Fragment>\r\n        <strong>GC Ratio</strong>\r\n        <pre>{this.state.gcval}</pre>\r\n      </React.Fragment>\r\n    ) : (\r\n      \"\"\r\n    );\r\n\r\n    const nBase = this.state.nb ? (\r\n      <React.Fragment>\r\n        <strong>N Bases</strong>\r\n        <pre>\r\n          <span style={{ color: this.state.nbval > 0 ? \"red\" : \"inherit\" }}>\r\n            {this.state.nbval}\r\n          </span>{\" \"}\r\n          N bases and{\" \"}\r\n          <span style={{ color: this.state.invalid > 0 ? \"red\" : \"inherit\" }}>\r\n            {this.state.invalid}\r\n          </span>{\" \"}\r\n          invalid bases.\r\n        </pre>\r\n      </React.Fragment>\r\n    ) : (\r\n      \"\"\r\n    );\r\n\r\n    const makeNRed = (seq: string) => {\r\n      return seq.split(\"\").map((el: string) => {\r\n        return (\r\n          <span style={{ color: el === \"N\" ? \"red\" : \"inherit\" }}>{el}</span>\r\n        );\r\n      });\r\n    };\r\n\r\n    const oSeq = this.state.os ? (\r\n      <React.Fragment>\r\n        <strong>Original Sequence</strong>\r\n        <pre>{makeNRed(this.state.osval)}</pre>\r\n      </React.Fragment>\r\n    ) : (\r\n      \"\"\r\n    );\r\n\r\n    const revSeq = this.state.rs ? (\r\n      <React.Fragment>\r\n        <strong>Reverse Sequence</strong>\r\n        <pre>{makeNRed(this.state.rsval)}</pre>\r\n      </React.Fragment>\r\n    ) : (\r\n      \"\"\r\n    );\r\n\r\n    const compSeq = this.state.cs ? (\r\n      <React.Fragment>\r\n        <strong>Complement Sequence</strong>\r\n        <pre>{makeNRed(this.state.csval)}</pre>\r\n      </React.Fragment>\r\n    ) : (\r\n      \"\"\r\n    );\r\n\r\n    const revCompSeq = this.state.rcs ? (\r\n      <React.Fragment>\r\n        <strong>Reverse Complement Sequence</strong>\r\n        <pre>{makeNRed(this.state.rcsval)}</pre>\r\n      </React.Fragment>\r\n    ) : (\r\n      \"\"\r\n    );\r\n    return (\r\n      <div className=\"App\">\r\n        <Grid container spacing={4}>\r\n          <h1 style={{ marginLeft: \"none\" }}>\r\n            DNA by <a href=\"https://www.darshanbaral.com/\">Darshan</a>\r\n          </h1>\r\n        </Grid>\r\n        <Grid container spacing={4}>\r\n          <Grid item xs={12} sm={6} style={{ padding: \"5px\" }}>\r\n            <FormGroup>\r\n              <h3 style={{ marginTop: \"0\" }}>Enter DNA sequence</h3>\r\n              <TextareaAutosize\r\n                style={{\r\n                  resize: \"vertical\",\r\n                  width: \"95%\",\r\n                  minHeight: \"20px\",\r\n                  fontSize: \"1em\",\r\n                }}\r\n                rows={5}\r\n                value={this.state.seq}\r\n                spellCheck={false}\r\n                aria-label=\"Enter DNA sequence\"\r\n                placeholder=\"White spaces and line breaks will be ignored. Input is not case sensitive.\"\r\n                onChange={this.onInputChange}\r\n                onFocus={this.onFocus}\r\n              />\r\n              <h3 style={{ marginTop: \"0.5em\" }}>Chunk Size</h3>\r\n              <Slider\r\n                defaultValue={4}\r\n                aria-labelledby=\"discrete-slider\"\r\n                valueLabelDisplay=\"auto\"\r\n                onChange={this.onSliderChange}\r\n                step={1}\r\n                marks={true}\r\n                min={0}\r\n                max={6}\r\n                style={{ width: \"95%\" }}\r\n              />\r\n              <h3>Options</h3>\r\n              {ops.map((el) => {\r\n                return (\r\n                  <Options\r\n                    value={el.value}\r\n                    label={el.label}\r\n                    retVal={el.retVal}\r\n                    retFunc={this.retFunc}\r\n                  />\r\n                );\r\n              })}\r\n            </FormGroup>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            xs={12}\r\n            sm={6}\r\n            style={{\r\n              backgroundColor: \"#bbdefb\",\r\n              border: \"1px solid #1976d2\",\r\n              borderRadius: \"5px\",\r\n            }}\r\n          >\r\n            {baseCount}\r\n            {gcRatio}\r\n            {nBase}\r\n            {oSeq}\r\n            {compSeq}\r\n            {revSeq}\r\n            {revCompSeq}\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nrender(<App />, rootElement);\r\n"],"sourceRoot":""}